`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 11/09/2019 09:43:01 PM
// Design Name: 
// Module Name: IM
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


//INSTRUCTION MEMORY
module IM #(parameter wid=32, dep=17)
(input[dep-1:0] IMRA, output[wid-1:0] IMRD);

    reg[wid-1:0] ROM[2**dep-1:0];
    assign IMRD = ROM[IMRA];
    
    initial begin
    //a) LOAD WORD
        ROM[0] = 32'b100011_00000_01000_0000_0000_0000_0000; //LW $t0 0($0)     #17 
        ROM[1] = 32'b100011_00000_01001_0000_0000_0000_0001; //LW $t1 1($0)     #31
        ROM[2] = 32'b100011_00000_01010_0000_0000_0000_0010; //LW $t2 2($0)     #-5
        ROM[3] = 32'b100011_00000_01011_0000_0000_0000_0011; //LW $t3 3($0)     #-2
        ROM[4] = 32'b100011_00000_01100_0000_0000_0000_0100; //LW $t4 4($0)     #250
    
    /**
    //b) + STORE WORD
        ROM[5] = 32'b101011_00000_01000_0000_0000_0001_1111; //SW $t0 31($0)
        ROM[6] = 32'b101011_00000_01001_0000_0000_0010_0000; //SW $t1 32($0)
        ROM[7] = 32'b101011_00000_01010_0000_0000_0010_0001; //SW $t2 33($0)
        ROM[8] = 32'b101011_00000_01011_0000_0000_0010_0010; //SW $t3 34($0)
        ROM[9] = 32'b101011_00000_01100_0000_0000_0010_0011; //SW $t4 35($0)
    **/
    
    /**
    //c) + R-type
        ROM[5] = 32'b000000_01000_01100_10000_XXXXX_100000; //ADD $s0, $t0, $t4
        ROM[6] = 32'b000000_10000_01100_10001_XXXXX_100010; //SUB $s1, $s0, $t4
        ROM[7] = 32'b000000_01010_10001_10010_XXXXX_100000; //ADD $s2, $t2, $s1
        ROM[8] = 32'b000000_XXXXX_10010_10011_00100_000000; //SLL $s3, $s2, 4
        ROM[9] = 32'b101011_00000_10000_0000_0000_0010_0000; //SW $s0 32($0)
        ROM[10] = 32'b101011_10011_10001_1111_1111_1111_1111; //SW $s1 -1($s3)
    **/
    
    /**
    //d) + I-type
        ROM[5] = 32'b001000_00000_01101_0000_0000_0000_0101; //ADDI $t5, $0, 5
        ROM[6] = 32'b001000_01101_01110_1111_1111_1111_1101; //ADDI $t6, $t5, -3
        ROM[7] = 32'b000000_01000_01100_10000_XXXXX_100000; //ADD $s0, $t0, $t4
        ROM[8] = 32'b000000_10000_01100_10001_XXXXX_100010; //SUB $s1, $s0, $t4
        ROM[9] = 32'b000000_01010_10001_10010_XXXXX_100000; //ADD $s2, $t2, $s1
        ROM[10] = 32'b000000_01101_10010_10011_XXXXX_000100; //SLLV $s3, $s2, $t5
        ROM[11] = 32'b000000_01110_10010_10100_XXXXX_000111; //SRAV $s4, $s2, $t6
        ROM[12] = 32'b101011_00000_10000_0000_0000_0010_0000; //SW $s0, 32($0)
        ROM[13] = 32'b101011_10011_10001_0000_0000_0000_0000; //SW $s1, 0($s3)
        ROM[14] = 32'b101011_10100_10001_0000_0000_0000_0000; //SW $s1, 0($s4)
    **/

    ///**
    //e) BRANCH/JUMP
        ROM[5] = 32'b001000_00000_10000_0000_0000_0000_0000; //ADDI $s0, $0, 0
        ROM[6] = 32'b001000_00000_10001_0000_0000_0000_0101; //ADDI $s1, $0, 5
        ROM[7] = 32'b001000_00000_10010_0000_0000_0000_0001; //ADDI $s2, $0, 1
        ROM[8] = 32'b000000_00000_00000_01011_XXXXX_100000; //ADD $t3, $0, $0
        ROM[9] = 32'b000100_10000_10001_0000_0000_0000_0111; //loop: BEQ $s0, $s1, done
        ROM[10] = 32'b100011_10000_01000_0000_0000_0000_0000; //LW $t0, 0($s0)
        ROM[11] = 32'b000000_10001_01000_01000_XXXXX_000100; //SLLV $t0, $t0, $s1
        ROM[12] = 32'b101011_10000_01000_0000_0000_0001_1111; //SW $t0, 31($s0)
        ROM[13] = 32'b000000_10010_10000_10000_XXXXX_100000; //ADD $s0, $s2, $s0
        ROM[14] = 32'b000000_01011_01000_01011_XXXXX_100000; //ADD $t3, $t3, $t0
        ROM[15] = 32'b000010_00_0000_0000_0000_0000_0000_1001; //J loop
        ROM[16] = 32'b000000_XXXXX_00000_00000_00000_000000; //done: NOP
        ROM[17] = 32'b000000_XXXXX_00000_00000_00000_000000; //NOP
    //**/
    end
endmodule
